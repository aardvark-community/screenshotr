@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Http
@inject ScreenshotrApp App
@inject IHttpContextAccessor httpContextAccessor

<PageTitle>Screenshotr.App</PageTitle>

@if (App.Model.ShowGallery)
{
    <div class="page">

        @* <div class="sidebar">
            <NavMenu />
        </div>*@

        <main tabindex="-1"
            @onkeypress="args => { if (App.Model.ActiveTagEditScreenshotId == null) App.Dispatch(ScreenshotrApp.MessageType.OnKeyPress, args); }"
            @onkeydown="args => { if (App.Model.ActiveTagEditScreenshotId == null) App.Dispatch(ScreenshotrApp.MessageType.OnKeyDown, args); }"
            @onkeyup="args => { if (App.Model.ActiveTagEditScreenshotId == null) App.Dispatch(ScreenshotrApp.MessageType.OnKeyUp, args); }"
            >
            <div class="top-row px-4">
                <div class="container-fluid">
                    <div class="row justify-content-between">
                        <div class="col">
                            <Stats />
                        </div>
                        <span class="col text-end" style="font-size:0.75em">
                            @App.Model.UserDisplayName
                        </span>
                        <div class="col-6 text-end" style="font-size:0.75em">
                            API @App.Model.Version, App @Global.AppVersion
                        </div>
                    </div>
                </div>
                @*<a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>*@
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
}
else if (App.Model.ShowSlideshow)
{
    <main 
        style="width:100%; height:100%;"
        tabindex="-1"
        @onkeypress="args => { if (App.Model.ActiveTagEditScreenshotId == null) App.Dispatch(ScreenshotrApp.MessageType.OnKeyPress, args); }"
        @onkeydown="args => { if (App.Model.ActiveTagEditScreenshotId == null) App.Dispatch(ScreenshotrApp.MessageType.OnKeyDown, args); }"
        @onkeyup="args => { if (App.Model.ActiveTagEditScreenshotId == null) App.Dispatch(ScreenshotrApp.MessageType.OnKeyUp, args); }"
        >
        @Body
    </main>
}
else
{
    <p>Nothing to show.</p>
}

@code
{
    // > Keyboard events are only generated by <inputs>, <textarea> and 
    // > anything with the contentEditable attribute or with tabindex="-1".
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex

    private void Update() => InvokeAsync(this.StateHasChanged);
    protected override void OnInitialized()
    {
        App.OnChange += Update;

        if (httpContextAccessor.HttpContext != null)
        {
            foreach (var h in httpContextAccessor.HttpContext.Request.Headers)
            {
                Console.WriteLine($"{h.Value}");
            }

            if (!string.IsNullOrWhiteSpace(ScreenshotrApp.HttpHeaderUserId))
            {
                var x = httpContextAccessor.HttpContext.Request.Headers[ScreenshotrApp.HttpHeaderUserId];
                Console.WriteLine($"SetUserId: {x.ToString()}");
                App.Dispatch(ScreenshotrApp.MessageType.SetUserId, x.ToString());
            }
            if (!string.IsNullOrWhiteSpace(ScreenshotrApp.HttpHeaderUserName))
            {
                var x = httpContextAccessor.HttpContext.Request.Headers[ScreenshotrApp.HttpHeaderUserName];
                Console.WriteLine($"SetUserName: {x.ToString()}");
                App.Dispatch(ScreenshotrApp.MessageType.SetUserName, x.ToString());
            }
            if (!string.IsNullOrWhiteSpace(ScreenshotrApp.HttpHeaderUserDisplayName))
            {
                var x = httpContextAccessor.HttpContext.Request.Headers[ScreenshotrApp.HttpHeaderUserDisplayName];
                Console.WriteLine($"SetUserDisplayName: {x.ToString()}");
                App.Dispatch(ScreenshotrApp.MessageType.SetUserDisplayName, x.ToString());
            }
        }
    }
    public void Dispose() => App.OnChange -= Update;
}