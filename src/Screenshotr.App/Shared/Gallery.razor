@inject ScreenshotrApp App
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">

        @*@foreach (var x in App.Model.Filter.FilteredScreenshots.Skip(App.Model.Filter.Skip).Take(App.Model.Filter.Take))*@
        @for (var i= 0; i < App.Model.Filter.FilteredScreenshots.Count; i++)
        {
            var index = i;
            var x = App.Model.Filter.FilteredScreenshots[index];

            <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3 col-xxl-2 col-xxxl-1 gy-4">
            <div class="card">
              
              <div class="card-header" style="font-size:0.75em">
                <div class="pt-1 d-flex justify-content-between">
                    <div>@FormatTimestamp(x.Created)</div>
                    <a class="bi bi-arrow-down-circle" href="@x.RelPathFullRes" target="_blank"></a>
                </div>
                <div class="pt-1 d-flex justify-content-between">
                    <div class="pt-1">@x.Size.X x @x.Size.Y</div>
                    <div>@FormatBytes(x.Bytes)</div>
                </div>
                
              </div>

              <ul class="list-group list-group-flush">

                <li class="list-group-item">
                    <img 
                        src="@x.RelPathThumb" 
                        class="card-img img-fluid rounded"
                        @onclick="args => App.Dispatch(ScreenshotrApp.MessageType.OnClickGalleryImage, index)"
                        />
                </li>

                <li class="list-group-item">

                    @foreach (var tag in GetTagsAndImportInfo(x))
                    {
                        @if (App.Model.Filter.SelectedTags.Contains(tag))
                        {
                            <span class="badge bg-primary" style="cursor: pointer; margin-right: 0.2em;">
                                <span>@tag</span>
                                <i class="bi bi-x" @onclick="() => RemoveTag(x, tag)"></i>
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-light text-dark" style="cursor: pointer; margin-right: 0.2em;">
                                <span>@tag</span>
                                <i class="bi bi-x" @onclick="() => RemoveTag(x, tag)"></i>
                            </span>
                        }
                    }

                    @if (App.Model.ActiveTagEditScreenshotId != null && x.Id == App.Model.ActiveTagEditScreenshotId)
                    {
                        <div>
                            <input type="text" 
                                class="form-control-xs border-1 border-primary h-75 w-50 d-inline-block" 
                                id="myEditTag" 
                                @bind-value="LiveTag" 
                                @onkeydown="OnKeyDown"
                                @ref="_newTagInput"
                                />
                            <button type="button" class="btn btn-outline-primary border-0 p-0" style="cursor: pointer;" @onclick="EditTagSubmit" >
                                <i class="bi bi-check2"></i>
                            </button>
                            <button type="button" class="btn btn-outline-primary border-0 p-0" style="cursor: pointer;" @onclick="EditTagCancel">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <span class="badge bg-light text-dark" style="cursor: pointer;" @onclick="() => EditTagStart(x)">
                            <i class="bi bi-plus"></i>
                        </span>
                    }

                </li>

              </ul>

            </div>
          </div>
        }
    </div>
</div>


@code {

    private ElementReference _newTagInput { get; set; }
    private string LiveTag { get; set; } = string.Empty;

    string FormatTimestamp(DateTimeOffset x) => $"{x.Year:0000}-{x.Month:00}-{x.Day:00} {x.Hour:00}:{x.Minute:00}:{x.Second:00} {x.Offset.Hours:+0}:{x.Offset.Minutes:00} UTC";
    string FormatBytes(long x) => x switch
    {
        _ when x < 1000 => $"{x:N0} bytes",
        _ when x < 1000*1000 => $"{x/1000.0:N0} kB",
        _ when x < 1000*1000*1000 => $"{x/(1000.0*1000):N1} MB",
        _ => $"{x/(1000.0*1000*1000):N2} GB",
    };

    IEnumerable<string> GetTagsAndImportInfo(Screenshot screenshot)
        => screenshot.Tags
            .Append(screenshot.ImportInfo.Process)
            .Append(screenshot.ImportInfo.Hostname)
            .Append(screenshot.ImportInfo.Username)
            .OrderBy(x => x)
            ;

    async Task OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            if (_module == null) throw new Exception("Assertion failed. Module is not initialized.");
            var result = await _module.InvokeAsync<string>("GetInputText", _newTagInput);
            LiveTag = result;
            EditTagSubmit();
        }
    }

    void RemoveTag(Screenshot screenshot, string tag)
    {
        App.Dispatch(ScreenshotrApp.MessageType.RemoveScreenshotTag, (screenshot.Id, tag));
    }

    void EditTagStart(Screenshot screenshot)
    {
        App.Dispatch(ScreenshotrApp.MessageType.EditScreenshotTagStart, screenshot.Id);
    }

    void EditTagSubmit()
    {
        App.Dispatch(ScreenshotrApp.MessageType.EditScreenshotTagSubmit, LiveTag);
        LiveTag = string.Empty;
    }

    void EditTagCancel()
    {
        App.Dispatch(ScreenshotrApp.MessageType.EditScreenshotTagCancel);
        LiveTag = string.Empty;
    }
    
    private IJSObjectReference? _module;
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/Gallery.razor.js");
        }

        if (App.Model.ActiveTagEditScreenshotId != null && _module != null)
        {
            await _module.InvokeVoidAsync("SetFocusToElement", "myEditTag");
        }
    }

	private void Update() => InvokeAsync(this.StateHasChanged);
    protected override void OnInitialized() => App.OnChange += Update;
    public void Dispose() => App.OnChange -= Update;
}
