@using System.Text.Json
@inject ScreenshotrApp App
@inject IJSRuntime JSRuntime

<div 
     class="bg-dark"
     style="widht: 100%; height: 100%;"
     @ref="imgRef"
     @onclick=OnClick
>
    @if (App.Model.CurrentSlideshowIndex >= 0 && App.Model.CurrentSlideshowIndex < App.Model.Filter.FilteredScreenshots.Count)
    {
        var x = App.Model.Filter.FilteredScreenshots[App.Model.CurrentSlideshowIndex];
        <div style="width: 100%; height: 100%; padding-bottom:32px;">

            <div style="width: 100%; height: 80%;">
                @if (x.MediaType == MediaType.Image || x.MediaType == MediaType.Unknown)
                {
                    <img
                        src="@x.RelPathFullRes"
                        style="width: 100%; height: 100%; object-fit: scale-down; padding-top: 0.2em;"
                        alt="@x.Id"
                        />
                }
                else if (x.MediaType == MediaType.Video)
                {
                    var path = x.RelPathThumb + ".converted.mp4";
                    
                    <video
                        autoplay controls loop
                        src="@path"
                        style="width: 100%; height: 100%; object-fit: scale-down; padding-top: 0.2em;"
                        alt="@x.Id"
                        />
                }
                else
                {
                    <p>Unknown media type.</p>
                }
            </div>

            <div class="d-flex flex-column" style="width: 100%; height: 20%;" @onclick:stopPropagation="true">

                <div 
                    class="p-2 m-2 d-flex justify-content-center">
                    @foreach (var tag in GetTagsAndImportInfo(x))
                    {
                        @if (App.Model.Filter.SelectedTags.Contains(tag))
                        {
                            <span class="badge bg-primary" style="cursor: pointer; margin-right: 0.2em;">
                                <span>@tag</span>
                                <i class="bi bi-x" @onclick="() => RemoveTag(x, tag)"></i>
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-light text-dark" style="cursor: pointer; margin-right: 0.2em;">
                                <span>@tag</span>
                                <i class="bi bi-x" @onclick="() => RemoveTag(x, tag)"></i>
                            </span>
                        }
                    }

                    @if (App.Model.ActiveTagEditScreenshotId != null && x.Id == App.Model.ActiveTagEditScreenshotId)
                    {
                        <div>
                            <input type="text"
                               class="form-control-xs border-1 border-primary h-75 w-50 d-inline-block"
                               id="slideshowEditTag"
                               @bind-value="LiveTag"
                               @onkeydown="OnKeyDown"
                               @ref="_newTagInput" />
                            <button type="button" class="btn btn-outline-primary border-0 p-0" style="cursor: pointer;" @onclick="EditTagSubmit">
                                <i class="bi bi-check2"></i>
                            </button>
                            <button type="button" class="btn btn-outline-primary border-0 p-0" style="cursor: pointer;" @onclick="EditTagCancel">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <span class="badge bg-light text-dark" style="cursor: pointer;" @onclick="() => EditTagStart(x)">
                            <i class="bi bi-plus"></i>
                        </span>
                    }

                </div>

                <div 
                    class="p-2 m-2 d-flex justify-content-center">
                    <div class="badge bg-light text-dark" style="margin-right: 1em;">
                        @FormatTimestamp(x.Created)
                    </div>
                    <div class="badge bg-light text-dark">
                        <a class="bi bi-arrow-down-circle" href="@x.RelPathFullRes" target="_blank"></a>
                    </div>
                </div>

                <div class="p-2 m-2 d-flex justify-content-center">
                    <div class="pt-1 badge bg-light text-dark" style="margin-right: 0.2em;">@x.Size.X x @x.Size.Y</div>
                    <div class="badge bg-light text-dark">@FormatBytes(x.Bytes)</div>
                </div>

                @if (x.Custom.Entries.Count > 0)
                {
                    <div class="p-2 m-2 d-flex flex-row justify-content-center">
                        <div class="d-flex">
                            <table class="table table-bordered bg-light">
                                @foreach (var custom in x.Custom.Entries)
                                {
                                    <tr>
                                        <th scope="row">@custom.Key</th>
                                        <td></td>
                                        <td>@custom.Value</td>
                                    </tr>
                                }
                            </table>
                        </div>
                    </div>
                }

            </div>

            <div 
                class="text-light" 
                style="position:absolute; top:0; right:0; padding: 2em; cursor:pointer" 
                @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.LeaveSlideShow)">
                <span>Close</span>
                <i class="bi bi-x-lg"></i>
            </div>

        </div>
    }
    else
    {
        <p>empty filter</p>
    }
</div>


@code {

    private ElementReference imgRef;

    public class BoundingClientRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    async Task OnClick(MouseEventArgs args)
    {
        if (_module == null) throw new Exception("Assertion failed. Module is not initialized.");

        var bounds = await _module.InvokeAsync<BoundingClientRect>("GetBoundingClientRect", imgRef);
        if (bounds == null) return;

        if (args.ClientX < bounds.Width * 0.5)
        {
            App.Dispatch(ScreenshotrApp.MessageType.SetSlideshowIndex, App.Model.CurrentSlideshowIndex - 1);
        }
        else
        {
            App.Dispatch(ScreenshotrApp.MessageType.SetSlideshowIndex, App.Model.CurrentSlideshowIndex + 1);
        }
    }

    private ElementReference _newTagInput { get; set; }
    private string LiveTag { get; set; } = string.Empty;

    string FormatTimestamp(DateTimeOffset x) => $"{x.Year:0000}-{x.Month:00}-{x.Day:00} {x.Hour:00}:{x.Minute:00}:{x.Second:00} {x.Offset.Hours:+0}:{x.Offset.Minutes:00} UTC";
    string FormatBytes(long x) => x switch
    {
        _ when x < 1000 => $"{x:N0} bytes",
        _ when x < 1000*1000 => $"{x/1000.0:N0} kB",
        _ when x < 1000*1000*1000 => $"{x/(1000.0*1000):N1} MB",
        _ => $"{x/(1000.0*1000*1000):N2} GB",
    };

    IEnumerable<string> GetTagsAndImportInfo(Screenshot screenshot)
        => screenshot.Tags
            .Append(screenshot.ImportInfo.Process)
            .Append(screenshot.ImportInfo.Hostname)
            .Append(screenshot.ImportInfo.Username)
            .OrderBy(x => x)
            ;

    async Task OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            if (_module == null) throw new Exception("Assertion failed. Module is not initialized.");
            var result = await _module.InvokeAsync<string>("GetInputText", _newTagInput);
            LiveTag = result;
            EditTagSubmit();
        }
    }

    void RemoveTag(Screenshot screenshot, string tag)
    {
        App.Dispatch(ScreenshotrApp.MessageType.RemoveScreenshotTag, (screenshot.Id, tag));
    }

    void EditTagStart(Screenshot screenshot)
    {
        App.Dispatch(ScreenshotrApp.MessageType.EditScreenshotTagStart, screenshot.Id);
    }

    void EditTagSubmit()
    {
        App.Dispatch(ScreenshotrApp.MessageType.EditScreenshotTagSubmit, LiveTag);
        LiveTag = string.Empty;
    }

    void EditTagCancel()
    {
        App.Dispatch(ScreenshotrApp.MessageType.EditScreenshotTagCancel);
        LiveTag = string.Empty;
    }

    private IJSObjectReference? _module;
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/Slideshow.razor.js");
        }

        if (App.Model.ActiveTagEditScreenshotId != null && _module != null)
        {
            await _module.InvokeVoidAsync("SetFocusToElement", "slideshowEditTag");
        }
    }

	private void Update() => InvokeAsync(this.StateHasChanged);
    protected override void OnInitialized() => App.OnChange += Update;
    public void Dispose() => App.OnChange -= Update;
}
