@inject ScreenshotrApp App
@inject IJSRuntime JSRuntime

<div>
    <ul class="list-group">

        <li class="list-group-item" style="font-size:0.75em">
            @*<div class="d-flex flex-row justify-content-between">*@
            <div class="d-flex flex-row justify-content-end">
                @* live search *@
                @if (true)
                {
                <div class="flex-fill" 
                    @onkeydown:stopPropagation="true"
                    @onkeypress:stopPropagation="true"
                    @onkeyup:stopPropagation="true"
                    >
                    @*<span style="margin-right: 0.3em;">search</span>*@
                    <input type="text"
                            class="form-control-xs border-1 border-primary h-75 w-50 d-inline-block"
                            id="myEditTag"
                            @bind-value="LiveSearchString"
                            @onkeyup="OnKeyPress"
                            @ref="_searchInputRef" />
                    <button 
                        type="button" class="btn btn-outline-primary border-0 p-0" style="cursor: pointer;"
                        @onclick="ClearLiveSearch"
                        >
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                }

                @* clear filter *@
                <div>
                    <span 
                        class="badge bg-link text-dark" 
                        style="margin-right: 0.2em; cursor: pointer;"
                        @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ResetFilter)"
                        >
                        <i class="bi bi bi-x-lg" style="margin-right: 0.3em;"></i>clear filter
                    </span>
                </div>

            </div>
        </li>

        <li class="list-group-item">
            <div>
                @foreach (var (year, count) in App.Model.Filter.FilteredYears)
                {
                    @if (App.Model.Filter.SelectedYears.Contains(year))
                    {
                        <span class="badge bg-primary" style="margin-right: 0.2em; cursor: pointer;"
                            @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedYear, year)"
                            >
                            <span><i class="bi bi-clock" style="margin-right: 0.3em;"></i>@year (@count)</span>
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-light text-dark" style="margin-right: 0.2em; cursor: pointer;"
                            @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedYear, year)"
                            >
                            <span><i class="bi bi-clock" style="margin-right: 0.3em;"></i>@year (@count)</span>
                        </span>
                    }
                }
            </div>
        </li>

        <li class="list-group-item">
            <div>
                @foreach (var (user, count) in App.Model.Filter.FilteredUsers)
                {
                    @if (App.Model.Filter.SelectedUsers.Contains(user))
                    {
                        <span class="badge bg-primary" style="margin-right: 0.2em; cursor: pointer;"
                            @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedUser, user)">
                            <span><i class="bi bi-person" style="margin-right: 0.3em;"></i>@user (@count)</span>
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-light text-dark" style="margin-right: 0.2em; cursor: pointer;"
                            @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedUser, user)">
                            <span><i class="bi bi-person" style="margin-right: 0.3em;"></i>@user (@count)</span>
                        </span>
                    }
                }
            </div>
        </li>

        <li class="list-group-item">
            <div>
                @foreach (var (hostname, count) in App.Model.Filter.FilteredHostnames)
                {
                    @if (App.Model.Filter.SelectedHostnames.Contains(hostname))
                    {
                        <span class="badge bg-primary" style="margin-right: 0.2em; cursor: pointer;"
                            @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedHostname, hostname)">
                            <span><i class="bi bi-laptop" style="margin-right: 0.3em;"></i>@hostname (@count)</span>
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-light text-dark" style="margin-right: 0.2em; cursor: pointer;"
                            @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedHostname, hostname)">
                            <span><i class="bi bi-laptop" style="margin-right: 0.3em;"></i>@hostname (@count)</span>
                        </span>
                    }
                }
            </div>
        </li>

        <li class="list-group-item">
            <div>
            @foreach (var (process, count) in App.Model.Filter.FilteredProcesses)
                {
                    @if (App.Model.Filter.SelectedProcesses.Contains(process))
                    {
                        <span class="badge bg-primary" style="margin-right: 0.2em; cursor: pointer;"
                            @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedProcess, process)">
                            <span><i class="bi bi-code-square" style="margin-right: 0.3em;"></i>@process (@count)</span>
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-light text-dark" style="margin-right: 0.2em; cursor: pointer;"
                            @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedProcess, process)">
                            <span><i class="bi bi-code-square" style="margin-right: 0.3em;"></i>@process (@count)</span>
                        </span>
                    }
                }
            </div>
        </li>

        <li class="list-group-item">
        <div>
            @foreach (var (tag, count) in App.Model.Filter.FilteredTags)
            {
                @if (App.Model.Filter.SelectedTags.Contains(tag))
                {
                    <span class="badge bg-primary" style="margin-right: 0.2em; cursor: pointer;"
                        @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedTag, tag)"
                        >
                        <span>@tag (@count)</span>
                    </span>
                }
                else
                {
                    <span class="badge bg-light text-dark" style="margin-right: 0.2em; cursor: pointer;"
                        @onclick="() => App.Dispatch(ScreenshotrApp.MessageType.ToggleSelectedTag, tag)"
                        >
                        <span>@tag (@count)</span>
                    </span>
                }
            }
        </div>
    </li>

    </ul>  

</div>

@code {

    private ElementReference _searchInputRef { get; set; }
    private string LiveSearchString { get; set; } = string.Empty;

    async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (_module == null) throw new Exception("Assertion failed. Module is not initialized.");
        var result = await _module.InvokeAsync<string>("GetInputText", _searchInputRef);
        LiveSearchString = result;
        App.Dispatch(ScreenshotrApp.MessageType.SetLiveSearch, result);
    }

    void ClearLiveSearch()
    {
        LiveSearchString = string.Empty;
        App.Dispatch(ScreenshotrApp.MessageType.SetLiveSearch, string.Empty);
    }

	private void Update() => InvokeAsync(this.StateHasChanged);
    protected override void OnInitialized() => App.OnChange += Update;
    public void Dispose() => App.OnChange -= Update;

    private IJSObjectReference? _module;
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/Filter.razor.js");
        }

        if (App.Model.ActiveTagEditScreenshotId != null && _module != null)
        {
            await _module.InvokeVoidAsync("SetFocusToElement", "myEditTag");
        }
    }
}
